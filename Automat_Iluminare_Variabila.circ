<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadFrequency" val="256410.2564102564"/>
    <a name="simulationFrequency" val="256000.0"/>
    <comp lib="0" loc="(1030,550)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(1300,550)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(1490,390)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(1760,130)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="m"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(1850,40)" name="Ground">
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(1870,240)" name="Ground">
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(2110,1180)" name="Tunnel">
      <a name="label" val="m"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(230,180)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="inc"/>
    </comp>
    <comp lib="0" loc="(230,210)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="dec"/>
    </comp>
    <comp lib="0" loc="(230,240)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(230,270)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="ok"/>
    </comp>
    <comp lib="0" loc="(230,300)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(2320,20)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(2320,40)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(2330,190)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(2330,210)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(2590,620)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(2630,640)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(2650,150)" name="Ground">
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(2650,280)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(2650,300)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(2650,70)" name="Ground">
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(2880,620)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="L01234568"/>
      <a name="output" val="true"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(2980,40)" name="Power"/>
    <comp lib="0" loc="(3030,380)" name="Constant">
      <a name="value" val="0xfd"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(3040,360)" name="Constant">
      <a name="value" val="0xfe"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(3040,400)" name="Constant">
      <a name="value" val="0xff"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(3040,420)" name="Constant">
      <a name="value" val="0xf7"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(3040,440)" name="Constant">
      <a name="value" val="0xef"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(3040,460)" name="Constant">
      <a name="value" val="0xdf"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(3040,480)" name="Constant">
      <a name="value" val="0xff"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(3040,500)" name="Constant">
      <a name="value" val="0x7f"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(3200,40)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="cathode"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(3290,360)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="anode"/>
      <a name="output" val="true"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(460,710)" name="Tunnel">
      <a name="label" val="inc"/>
    </comp>
    <comp lib="0" loc="(460,740)" name="Tunnel">
      <a name="label" val="dec"/>
    </comp>
    <comp lib="0" loc="(460,770)" name="Tunnel">
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(460,800)" name="Tunnel">
      <a name="label" val="ok"/>
    </comp>
    <comp lib="0" loc="(460,830)" name="Tunnel">
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(510,180)" name="Tunnel">
      <a name="label" val="m"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(510,320)" name="Tunnel">
      <a name="facing" val="north"/>
      <a name="label" val="en_tst"/>
    </comp>
    <comp lib="0" loc="(600,710)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="en_tst"/>
    </comp>
    <comp lib="0" loc="(660,230)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="inc"/>
    </comp>
    <comp lib="0" loc="(660,260)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="dec"/>
    </comp>
    <comp lib="0" loc="(660,290)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(660,690)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(690,1140)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(690,600)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(710,420)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="inc"/>
    </comp>
    <comp lib="0" loc="(710,450)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="dec"/>
    </comp>
    <comp lib="0" loc="(710,480)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(750,580)" name="Tunnel">
      <a name="facing" val="east"/>
      <a name="label" val="ok"/>
    </comp>
    <comp lib="0" loc="(80,770)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="in_rst"/>
    </comp>
    <comp lib="0" loc="(80,800)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="in_ok"/>
    </comp>
    <comp lib="0" loc="(90,710)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="in_inc"/>
    </comp>
    <comp lib="0" loc="(90,740)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="in_dec"/>
    </comp>
    <comp lib="0" loc="(90,830)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="in_clk"/>
    </comp>
    <comp loc="(1240,540)" name="or_gate">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1520,510)" name="clk_256_pe_per_hz">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1750,370)" name="triangular">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2130,40)" name="mux_4_la_1_4bit">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2140,190)" name="mux_4_la_1_8bit">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2320,650)" name="mux_24_la_8_8bit">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2540,20)" name="binary_bcd">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2550,190)" name="binary_bcd">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2870,280)" name="UP_COUNTER">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2870,30)" name="mux_8_la_1_4bit">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2880,620)" name="pwm">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(3200,40)" name="ssddecoder">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(3260,360)" name="mux_8_la_1_7bit">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(370,640)" name="debouncer_30ns">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(370,700)" name="debouncer_30ns">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(370,760)" name="debouncer_30ns">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(370,820)" name="debouncer_30ns">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(510,180)" name="UC">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(590,400)" name="div_freq_2hz">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(650,540)" name="and_gate">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(940,260)" name="man_ctr">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(960,1020)" name="numarator_5s">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(960,1100)" name="numarator_6s">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(960,1180)" name="numarator_7s">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(960,1260)" name="numarator_8s">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(960,430)" name="nr_auto">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(960,700)" name="numarator_1s">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(960,780)" name="numarator_2s">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(960,860)" name="numarator_3s">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(960,940)" name="numarator_4s">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(970,580)" name="RS">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(100,700)" to="(100,740)"/>
    <wire from="(100,700)" to="(150,700)"/>
    <wire from="(1010,430)" to="(1010,500)"/>
    <wire from="(1010,500)" to="(1270,500)"/>
    <wire from="(110,760)" to="(110,770)"/>
    <wire from="(110,760)" to="(150,760)"/>
    <wire from="(1240,540)" to="(1260,540)"/>
    <wire from="(1260,530)" to="(1260,540)"/>
    <wire from="(1260,530)" to="(1300,530)"/>
    <wire from="(1270,500)" to="(1300,500)"/>
    <wire from="(1270,60)" to="(1270,500)"/>
    <wire from="(1270,60)" to="(1910,60)"/>
    <wire from="(130,660)" to="(130,720)"/>
    <wire from="(130,660)" to="(150,660)"/>
    <wire from="(130,720)" to="(130,780)"/>
    <wire from="(130,720)" to="(150,720)"/>
    <wire from="(130,780)" to="(130,830)"/>
    <wire from="(130,780)" to="(150,780)"/>
    <wire from="(130,830)" to="(130,890)"/>
    <wire from="(130,830)" to="(150,830)"/>
    <wire from="(130,890)" to="(460,890)"/>
    <wire from="(1300,500)" to="(1300,510)"/>
    <wire from="(1490,390)" to="(1530,390)"/>
    <wire from="(150,830)" to="(150,840)"/>
    <wire from="(1520,370)" to="(1520,510)"/>
    <wire from="(1520,370)" to="(1530,370)"/>
    <wire from="(1590,430)" to="(1590,680)"/>
    <wire from="(1590,430)" to="(1760,430)"/>
    <wire from="(1590,680)" to="(2090,680)"/>
    <wire from="(1730,190)" to="(1730,260)"/>
    <wire from="(1730,190)" to="(1920,190)"/>
    <wire from="(1730,260)" to="(1770,260)"/>
    <wire from="(1740,440)" to="(1740,610)"/>
    <wire from="(1740,440)" to="(1770,440)"/>
    <wire from="(1740,610)" to="(2130,610)"/>
    <wire from="(1750,370)" to="(1760,370)"/>
    <wire from="(1760,130)" to="(1810,130)"/>
    <wire from="(1760,210)" to="(1760,370)"/>
    <wire from="(1760,210)" to="(1920,210)"/>
    <wire from="(1760,370)" to="(1760,430)"/>
    <wire from="(1770,260)" to="(1770,440)"/>
    <wire from="(1810,130)" to="(1810,260)"/>
    <wire from="(1810,130)" to="(1910,130)"/>
    <wire from="(1810,260)" to="(1910,260)"/>
    <wire from="(1850,40)" to="(1880,40)"/>
    <wire from="(1870,230)" to="(1870,240)"/>
    <wire from="(1870,230)" to="(1900,230)"/>
    <wire from="(1880,100)" to="(1910,100)"/>
    <wire from="(1880,1030)" to="(2100,1030)"/>
    <wire from="(1880,40)" to="(1880,80)"/>
    <wire from="(1880,40)" to="(1910,40)"/>
    <wire from="(1880,80)" to="(1880,100)"/>
    <wire from="(1880,80)" to="(1910,80)"/>
    <wire from="(1880,940)" to="(1880,1030)"/>
    <wire from="(1890,1020)" to="(1890,1050)"/>
    <wire from="(1890,1050)" to="(2100,1050)"/>
    <wire from="(1900,1070)" to="(1900,1100)"/>
    <wire from="(1900,1070)" to="(2100,1070)"/>
    <wire from="(1900,230)" to="(1900,250)"/>
    <wire from="(1900,230)" to="(1920,230)"/>
    <wire from="(1900,250)" to="(1920,250)"/>
    <wire from="(1910,120)" to="(1910,130)"/>
    <wire from="(1910,260)" to="(1910,270)"/>
    <wire from="(1910,270)" to="(1920,270)"/>
    <wire from="(1920,1090)" to="(1920,1180)"/>
    <wire from="(1920,1090)" to="(2100,1090)"/>
    <wire from="(1930,1110)" to="(1930,1120)"/>
    <wire from="(1930,1110)" to="(2100,1110)"/>
    <wire from="(1930,1120)" to="(1960,1120)"/>
    <wire from="(1960,1120)" to="(1960,1260)"/>
    <wire from="(2060,1010)" to="(2100,1010)"/>
    <wire from="(2060,860)" to="(2060,1010)"/>
    <wire from="(2070,780)" to="(2070,990)"/>
    <wire from="(2070,990)" to="(2100,990)"/>
    <wire from="(2080,620)" to="(2080,650)"/>
    <wire from="(2080,620)" to="(2130,620)"/>
    <wire from="(2080,650)" to="(2100,650)"/>
    <wire from="(2080,700)" to="(2080,970)"/>
    <wire from="(2080,970)" to="(2100,970)"/>
    <wire from="(2090,680)" to="(2090,810)"/>
    <wire from="(2090,810)" to="(2100,810)"/>
    <wire from="(2100,1070)" to="(2110,1070)"/>
    <wire from="(2100,1090)" to="(2110,1090)"/>
    <wire from="(2100,1130)" to="(2100,1180)"/>
    <wire from="(2100,1180)" to="(2110,1180)"/>
    <wire from="(2100,650)" to="(2100,670)"/>
    <wire from="(2100,670)" to="(2100,690)"/>
    <wire from="(2100,690)" to="(2100,710)"/>
    <wire from="(2100,710)" to="(2100,730)"/>
    <wire from="(2100,730)" to="(2100,750)"/>
    <wire from="(2100,750)" to="(2100,770)"/>
    <wire from="(2100,770)" to="(2100,790)"/>
    <wire from="(2100,810)" to="(2100,830)"/>
    <wire from="(2100,830)" to="(2100,850)"/>
    <wire from="(2100,850)" to="(2100,870)"/>
    <wire from="(2100,870)" to="(2100,890)"/>
    <wire from="(2100,890)" to="(2100,910)"/>
    <wire from="(2100,910)" to="(2100,930)"/>
    <wire from="(2100,930)" to="(2100,950)"/>
    <wire from="(2130,40)" to="(2180,40)"/>
    <wire from="(2130,610)" to="(2130,620)"/>
    <wire from="(2140,190)" to="(2140,230)"/>
    <wire from="(2140,230)" to="(2330,230)"/>
    <wire from="(2180,40)" to="(2180,60)"/>
    <wire from="(2180,60)" to="(2320,60)"/>
    <wire from="(230,180)" to="(290,180)"/>
    <wire from="(230,210)" to="(270,210)"/>
    <wire from="(230,240)" to="(280,240)"/>
    <wire from="(230,270)" to="(260,270)"/>
    <wire from="(230,300)" to="(270,300)"/>
    <wire from="(2320,650)" to="(2320,660)"/>
    <wire from="(2320,660)" to="(2660,660)"/>
    <wire from="(2320,670)" to="(2660,670)"/>
    <wire from="(2320,690)" to="(2320,700)"/>
    <wire from="(2320,700)" to="(2660,700)"/>
    <wire from="(2320,710)" to="(2660,710)"/>
    <wire from="(2320,730)" to="(2320,740)"/>
    <wire from="(2320,740)" to="(2660,740)"/>
    <wire from="(2320,750)" to="(2660,750)"/>
    <wire from="(2320,770)" to="(2320,780)"/>
    <wire from="(2320,780)" to="(2660,780)"/>
    <wire from="(2320,790)" to="(2660,790)"/>
    <wire from="(2540,20)" to="(2650,20)"/>
    <wire from="(2540,40)" to="(2650,40)"/>
    <wire from="(2550,210)" to="(2570,210)"/>
    <wire from="(2550,230)" to="(2590,230)"/>
    <wire from="(2550,90)" to="(2550,190)"/>
    <wire from="(2550,90)" to="(2650,90)"/>
    <wire from="(2570,110)" to="(2570,210)"/>
    <wire from="(2570,110)" to="(2650,110)"/>
    <wire from="(2590,130)" to="(2590,230)"/>
    <wire from="(2590,130)" to="(2650,130)"/>
    <wire from="(2590,620)" to="(2660,620)"/>
    <wire from="(260,250)" to="(260,270)"/>
    <wire from="(260,250)" to="(290,250)"/>
    <wire from="(2630,640)" to="(2660,640)"/>
    <wire from="(2650,190)" to="(2650,230)"/>
    <wire from="(2650,20)" to="(2650,30)"/>
    <wire from="(2650,230)" to="(2870,230)"/>
    <wire from="(2650,40)" to="(2650,50)"/>
    <wire from="(2660,670)" to="(2660,680)"/>
    <wire from="(2660,710)" to="(2660,720)"/>
    <wire from="(2660,750)" to="(2660,760)"/>
    <wire from="(2660,750)" to="(2670,750)"/>
    <wire from="(2660,790)" to="(2660,800)"/>
    <wire from="(2670,750)" to="(2670,760)"/>
    <wire from="(270,200)" to="(270,210)"/>
    <wire from="(270,200)" to="(290,200)"/>
    <wire from="(270,300)" to="(270,400)"/>
    <wire from="(270,300)" to="(290,300)"/>
    <wire from="(270,400)" to="(360,400)"/>
    <wire from="(280,220)" to="(280,240)"/>
    <wire from="(280,220)" to="(290,220)"/>
    <wire from="(2870,230)" to="(2870,280)"/>
    <wire from="(2870,280)" to="(2870,520)"/>
    <wire from="(2870,30)" to="(2870,60)"/>
    <wire from="(2870,520)" to="(3040,520)"/>
    <wire from="(2870,60)" to="(2980,60)"/>
    <wire from="(290,240)" to="(290,250)"/>
    <wire from="(290,260)" to="(290,300)"/>
    <wire from="(3030,380)" to="(3040,380)"/>
    <wire from="(3260,360)" to="(3290,360)"/>
    <wire from="(360,400)" to="(360,620)"/>
    <wire from="(360,400)" to="(370,400)"/>
    <wire from="(360,620)" to="(750,620)"/>
    <wire from="(370,640)" to="(460,640)"/>
    <wire from="(370,700)" to="(370,740)"/>
    <wire from="(370,740)" to="(460,740)"/>
    <wire from="(370,760)" to="(460,760)"/>
    <wire from="(370,820)" to="(420,820)"/>
    <wire from="(410,510)" to="(410,560)"/>
    <wire from="(410,510)" to="(610,510)"/>
    <wire from="(410,560)" to="(430,560)"/>
    <wire from="(420,800)" to="(420,820)"/>
    <wire from="(420,800)" to="(460,800)"/>
    <wire from="(430,530)" to="(430,540)"/>
    <wire from="(430,530)" to="(700,530)"/>
    <wire from="(460,640)" to="(460,710)"/>
    <wire from="(460,760)" to="(460,770)"/>
    <wire from="(460,830)" to="(460,890)"/>
    <wire from="(510,200)" to="(550,200)"/>
    <wire from="(510,220)" to="(610,220)"/>
    <wire from="(510,240)" to="(510,320)"/>
    <wire from="(550,200)" to="(550,340)"/>
    <wire from="(550,340)" to="(720,340)"/>
    <wire from="(590,400)" to="(600,400)"/>
    <wire from="(600,400)" to="(600,490)"/>
    <wire from="(600,400)" to="(710,400)"/>
    <wire from="(600,490)" to="(740,490)"/>
    <wire from="(600,710)" to="(680,710)"/>
    <wire from="(610,220)" to="(610,510)"/>
    <wire from="(610,510)" to="(610,520)"/>
    <wire from="(650,540)" to="(740,540)"/>
    <wire from="(660,230)" to="(720,230)"/>
    <wire from="(660,260)" to="(700,260)"/>
    <wire from="(660,290)" to="(700,290)"/>
    <wire from="(660,690)" to="(720,690)"/>
    <wire from="(680,1040)" to="(680,1120)"/>
    <wire from="(680,1040)" to="(700,1040)"/>
    <wire from="(680,1120)" to="(740,1120)"/>
    <wire from="(680,710)" to="(680,800)"/>
    <wire from="(680,710)" to="(740,710)"/>
    <wire from="(680,800)" to="(680,880)"/>
    <wire from="(680,800)" to="(740,800)"/>
    <wire from="(680,880)" to="(680,960)"/>
    <wire from="(680,880)" to="(740,880)"/>
    <wire from="(680,960)" to="(680,1040)"/>
    <wire from="(680,960)" to="(740,960)"/>
    <wire from="(690,1140)" to="(710,1140)"/>
    <wire from="(690,600)" to="(750,600)"/>
    <wire from="(700,1040)" to="(700,1200)"/>
    <wire from="(700,1040)" to="(740,1040)"/>
    <wire from="(700,1200)" to="(700,1280)"/>
    <wire from="(700,1200)" to="(740,1200)"/>
    <wire from="(700,1280)" to="(740,1280)"/>
    <wire from="(700,260)" to="(700,280)"/>
    <wire from="(700,280)" to="(720,280)"/>
    <wire from="(700,290)" to="(700,320)"/>
    <wire from="(700,320)" to="(720,320)"/>
    <wire from="(700,530)" to="(700,550)"/>
    <wire from="(700,550)" to="(970,550)"/>
    <wire from="(710,1140)" to="(710,1220)"/>
    <wire from="(710,1140)" to="(730,1140)"/>
    <wire from="(710,1220)" to="(710,1300)"/>
    <wire from="(710,1220)" to="(740,1220)"/>
    <wire from="(710,1300)" to="(740,1300)"/>
    <wire from="(710,300)" to="(710,400)"/>
    <wire from="(710,300)" to="(720,300)"/>
    <wire from="(710,420)" to="(740,420)"/>
    <wire from="(710,450)" to="(740,450)"/>
    <wire from="(710,480)" to="(740,480)"/>
    <wire from="(720,1020)" to="(720,1100)"/>
    <wire from="(720,1020)" to="(740,1020)"/>
    <wire from="(720,1100)" to="(720,1180)"/>
    <wire from="(720,1100)" to="(740,1100)"/>
    <wire from="(720,1180)" to="(720,1260)"/>
    <wire from="(720,1180)" to="(740,1180)"/>
    <wire from="(720,1260)" to="(740,1260)"/>
    <wire from="(720,230)" to="(720,260)"/>
    <wire from="(720,690)" to="(720,700)"/>
    <wire from="(720,700)" to="(720,780)"/>
    <wire from="(720,700)" to="(740,700)"/>
    <wire from="(720,780)" to="(720,860)"/>
    <wire from="(720,780)" to="(740,780)"/>
    <wire from="(720,860)" to="(720,940)"/>
    <wire from="(720,860)" to="(740,860)"/>
    <wire from="(720,940)" to="(720,1020)"/>
    <wire from="(720,940)" to="(740,940)"/>
    <wire from="(730,1060)" to="(730,1140)"/>
    <wire from="(730,1060)" to="(740,1060)"/>
    <wire from="(730,1140)" to="(740,1140)"/>
    <wire from="(730,740)" to="(730,820)"/>
    <wire from="(730,740)" to="(740,740)"/>
    <wire from="(730,820)" to="(730,900)"/>
    <wire from="(730,820)" to="(740,820)"/>
    <wire from="(730,900)" to="(730,980)"/>
    <wire from="(730,900)" to="(740,900)"/>
    <wire from="(730,980)" to="(730,1060)"/>
    <wire from="(730,980)" to="(740,980)"/>
    <wire from="(740,1300)" to="(750,1300)"/>
    <wire from="(740,420)" to="(740,430)"/>
    <wire from="(740,470)" to="(740,480)"/>
    <wire from="(740,510)" to="(740,540)"/>
    <wire from="(740,710)" to="(740,720)"/>
    <wire from="(80,770)" to="(110,770)"/>
    <wire from="(80,800)" to="(80,820)"/>
    <wire from="(80,820)" to="(150,820)"/>
    <wire from="(90,640)" to="(150,640)"/>
    <wire from="(90,640)" to="(90,710)"/>
    <wire from="(90,740)" to="(100,740)"/>
    <wire from="(90,830)" to="(130,830)"/>
    <wire from="(940,260)" to="(1730,260)"/>
    <wire from="(960,1020)" to="(1890,1020)"/>
    <wire from="(960,1100)" to="(1900,1100)"/>
    <wire from="(960,1180)" to="(1920,1180)"/>
    <wire from="(960,1260)" to="(1960,1260)"/>
    <wire from="(960,430)" to="(1010,430)"/>
    <wire from="(960,700)" to="(2080,700)"/>
    <wire from="(960,780)" to="(2070,780)"/>
    <wire from="(960,860)" to="(2060,860)"/>
    <wire from="(960,940)" to="(1880,940)"/>
    <wire from="(970,550)" to="(970,560)"/>
    <wire from="(970,560)" to="(1020,560)"/>
    <wire from="(970,560)" to="(970,580)"/>
  </circuit>
  <circuit name="mod_manual">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="mod_manual"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="NEXYS4_DDR_NOU"/>
    <a name="downloadFrequency" val="256410.2564102564"/>
    <a name="simulationFrequency" val="256000.0"/>
    <boardmap boardname="NEXYS4_DDR_NOU">
      <mc key="/Output_bus_1" pmap="590_271_0,559_271_0,532_271_0,496_271_0,468_271_0,435_271_0,400_271_0,370_271_0"/>
      <mc key="/Output_bus_2" pmap="337_271_0,305_271_0,273_271_0,240_271_0,206_271_0,172_271_0,140_271_0,107_271_0"/>
      <mc key="/clk" map="298,144"/>
      <mc key="/dec" map="477,138"/>
      <mc key="/inc" map="564,138"/>
      <mc key="/rst" map="521,184"/>
    </boardmap>
    <comp lib="0" loc="(1250,150)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_1"/>
      <a name="output" val="true"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(1910,200)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_2"/>
      <a name="output" val="true"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(370,590)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(450,220)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="inc"/>
    </comp>
    <comp lib="0" loc="(450,310)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="dec"/>
    </comp>
    <comp lib="0" loc="(450,460)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(830,330)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="en"/>
    </comp>
    <comp loc="(1160,240)" name="man_ctr">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="man_ctr_1"/>
    </comp>
    <comp loc="(1490,330)" name="div_freq_2hz">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="div_freq_2hz_1"/>
    </comp>
    <comp loc="(1910,200)" name="pwm">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="pwm_1"/>
    </comp>
    <comp loc="(670,220)" name="debouncer_30ns">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_30ns_1"/>
    </comp>
    <comp loc="(670,310)" name="debouncer_30ns">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_30ns_2"/>
    </comp>
    <comp loc="(670,460)" name="debouncer_30ns">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_30ns_3"/>
    </comp>
    <wire from="(1160,240)" to="(1250,240)"/>
    <wire from="(1220,290)" to="(1220,390)"/>
    <wire from="(1220,290)" to="(1490,290)"/>
    <wire from="(1250,150)" to="(1250,240)"/>
    <wire from="(1250,240)" to="(1690,240)"/>
    <wire from="(1270,330)" to="(1270,480)"/>
    <wire from="(1270,480)" to="(1270,500)"/>
    <wire from="(1270,480)" to="(1580,480)"/>
    <wire from="(1490,290)" to="(1490,330)"/>
    <wire from="(1580,200)" to="(1580,480)"/>
    <wire from="(1580,200)" to="(1690,200)"/>
    <wire from="(1610,220)" to="(1610,430)"/>
    <wire from="(1610,220)" to="(1690,220)"/>
    <wire from="(1690,240)" to="(1690,260)"/>
    <wire from="(1690,260)" to="(1690,280)"/>
    <wire from="(1690,280)" to="(1690,300)"/>
    <wire from="(1690,300)" to="(1690,320)"/>
    <wire from="(1690,320)" to="(1690,340)"/>
    <wire from="(1690,340)" to="(1690,360)"/>
    <wire from="(1690,360)" to="(1690,380)"/>
    <wire from="(370,240)" to="(370,330)"/>
    <wire from="(370,240)" to="(450,240)"/>
    <wire from="(370,330)" to="(370,480)"/>
    <wire from="(370,330)" to="(450,330)"/>
    <wire from="(370,480)" to="(370,590)"/>
    <wire from="(370,480)" to="(450,480)"/>
    <wire from="(370,590)" to="(910,590)"/>
    <wire from="(450,240)" to="(460,240)"/>
    <wire from="(670,220)" to="(940,220)"/>
    <wire from="(670,310)" to="(890,310)"/>
    <wire from="(670,460)" to="(930,460)"/>
    <wire from="(830,330)" to="(940,330)"/>
    <wire from="(890,250)" to="(890,260)"/>
    <wire from="(890,260)" to="(890,310)"/>
    <wire from="(890,260)" to="(940,260)"/>
    <wire from="(910,280)" to="(910,390)"/>
    <wire from="(910,280)" to="(940,280)"/>
    <wire from="(910,390)" to="(1220,390)"/>
    <wire from="(910,500)" to="(1270,500)"/>
    <wire from="(910,500)" to="(910,590)"/>
    <wire from="(930,300)" to="(930,430)"/>
    <wire from="(930,300)" to="(940,300)"/>
    <wire from="(930,430)" to="(1610,430)"/>
    <wire from="(930,430)" to="(930,460)"/>
    <wire from="(940,220)" to="(940,240)"/>
    <wire from="(940,320)" to="(940,330)"/>
  </circuit>
  <circuit name="mod_automat">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="mod_automat"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="NEXYS4_DDR_NOU"/>
    <a name="downloadFrequency" val="256410.2564102564"/>
    <a name="simulationFrequency" val="256000.0"/>
    <boardmap boardname="NEXYS4_DDR_NOU">
      <mc key="/Output_bus_1" pmap="590_271_0,559_271_0,532_271_0,496_271_0,468_271_0,435_271_0,400_271_0,370_271_0"/>
      <mc key="/Output_bus_2" pmap="337_271_0,305_271_0,273_271_0,240_271_0"/>
      <mc key="/clk" map="298,144"/>
      <mc key="/dec" map="477,138"/>
      <mc key="/inc" map="564,138"/>
      <mc key="/ok" map="522,138"/>
      <mc key="/rst" map="521,184"/>
    </boardmap>
    <comp lib="0" loc="(150,560)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(2030,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_1"/>
      <a name="output" val="true"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(220,350)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="ok"/>
    </comp>
    <comp lib="0" loc="(230,190)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="inc"/>
    </comp>
    <comp lib="0" loc="(230,280)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="dec"/>
    </comp>
    <comp lib="0" loc="(230,430)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(950,160)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_2"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp loc="(1120,440)" name="or_gate">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="or_gate_1"/>
    </comp>
    <comp loc="(1380,410)" name="clk_256_pe_per_hz">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="clk_256_pe_per_hz_1"/>
    </comp>
    <comp loc="(1670,300)" name="triangular">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="triangular_1"/>
    </comp>
    <comp loc="(2030,230)" name="pwm">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="pwm_1"/>
    </comp>
    <comp loc="(440,350)" name="debouncer_30ns">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_30ns_4"/>
    </comp>
    <comp loc="(450,190)" name="debouncer_30ns">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_30ns_1"/>
    </comp>
    <comp loc="(450,280)" name="debouncer_30ns">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_30ns_2"/>
      <a name="labelvisible" val="true"/>
    </comp>
    <comp loc="(450,430)" name="debouncer_30ns">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_30ns_3"/>
    </comp>
    <comp loc="(760,400)" name="div_freq_2hz">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="div_freq_2hz_1"/>
    </comp>
    <comp loc="(840,480)" name="RS">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="rs_1"/>
      <a name="labelvisible" val="true"/>
    </comp>
    <comp loc="(860,200)" name="nr_auto">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="nr_auto_1"/>
    </comp>
    <wire from="(1120,430)" to="(1120,440)"/>
    <wire from="(1120,430)" to="(1160,430)"/>
    <wire from="(1160,200)" to="(1160,410)"/>
    <wire from="(1160,450)" to="(1160,540)"/>
    <wire from="(1160,540)" to="(1160,560)"/>
    <wire from="(1160,540)" to="(1730,540)"/>
    <wire from="(1380,300)" to="(1380,410)"/>
    <wire from="(1380,300)" to="(1450,300)"/>
    <wire from="(1430,250)" to="(1430,320)"/>
    <wire from="(1430,250)" to="(1810,250)"/>
    <wire from="(1430,320)" to="(1450,320)"/>
    <wire from="(150,210)" to="(150,300)"/>
    <wire from="(150,210)" to="(230,210)"/>
    <wire from="(150,300)" to="(150,370)"/>
    <wire from="(150,300)" to="(230,300)"/>
    <wire from="(150,370)" to="(150,450)"/>
    <wire from="(150,370)" to="(220,370)"/>
    <wire from="(150,450)" to="(150,560)"/>
    <wire from="(150,450)" to="(230,450)"/>
    <wire from="(150,560)" to="(540,560)"/>
    <wire from="(1670,300)" to="(1810,300)"/>
    <wire from="(1730,230)" to="(1730,540)"/>
    <wire from="(1730,230)" to="(1810,230)"/>
    <wire from="(1810,270)" to="(1810,290)"/>
    <wire from="(1810,290)" to="(1810,300)"/>
    <wire from="(1810,300)" to="(1810,310)"/>
    <wire from="(1810,310)" to="(1810,330)"/>
    <wire from="(1810,330)" to="(1810,350)"/>
    <wire from="(1810,350)" to="(1810,370)"/>
    <wire from="(1810,370)" to="(1810,390)"/>
    <wire from="(1810,390)" to="(1810,410)"/>
    <wire from="(1810,410)" to="(1820,410)"/>
    <wire from="(230,210)" to="(240,210)"/>
    <wire from="(440,350)" to="(500,350)"/>
    <wire from="(450,190)" to="(640,190)"/>
    <wire from="(450,220)" to="(450,280)"/>
    <wire from="(450,220)" to="(640,220)"/>
    <wire from="(450,290)" to="(450,430)"/>
    <wire from="(450,290)" to="(520,290)"/>
    <wire from="(450,430)" to="(450,450)"/>
    <wire from="(450,450)" to="(450,500)"/>
    <wire from="(450,450)" to="(870,450)"/>
    <wire from="(450,500)" to="(620,500)"/>
    <wire from="(500,350)" to="(500,480)"/>
    <wire from="(500,480)" to="(620,480)"/>
    <wire from="(520,240)" to="(520,290)"/>
    <wire from="(520,240)" to="(640,240)"/>
    <wire from="(540,400)" to="(540,530)"/>
    <wire from="(540,530)" to="(540,560)"/>
    <wire from="(540,530)" to="(620,530)"/>
    <wire from="(540,560)" to="(1160,560)"/>
    <wire from="(580,260)" to="(580,320)"/>
    <wire from="(580,260)" to="(640,260)"/>
    <wire from="(580,320)" to="(760,320)"/>
    <wire from="(620,520)" to="(620,530)"/>
    <wire from="(640,190)" to="(640,200)"/>
    <wire from="(640,280)" to="(640,340)"/>
    <wire from="(640,340)" to="(840,340)"/>
    <wire from="(760,320)" to="(760,400)"/>
    <wire from="(840,340)" to="(840,460)"/>
    <wire from="(840,460)" to="(840,480)"/>
    <wire from="(840,460)" to="(900,460)"/>
    <wire from="(860,200)" to="(910,200)"/>
    <wire from="(870,320)" to="(1430,320)"/>
    <wire from="(870,320)" to="(870,450)"/>
    <wire from="(870,450)" to="(900,450)"/>
    <wire from="(900,440)" to="(900,450)"/>
    <wire from="(910,160)" to="(910,200)"/>
    <wire from="(910,160)" to="(950,160)"/>
    <wire from="(910,200)" to="(1160,200)"/>
  </circuit>
  <circuit name="mod_test">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="mod_test"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="NEXYS4_DDR_NOU"/>
    <a name="downloadFrequency" val="256410.2564102564"/>
    <a name="simulationFrequency" val="256000.0"/>
    <boardmap boardname="NEXYS4_DDR_NOU">
      <mc key="/Output_bus_1" pmap="590_271_0,559_271_0,532_271_0,496_271_0,468_271_0,435_271_0,400_271_0,370_271_0"/>
      <mc key="/clk" map="298,144"/>
      <mc key="/en" map="94,325"/>
      <mc key="/rst" map="521,184"/>
    </boardmap>
    <comp lib="0" loc="(100,160)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="rst"/>
    </comp>
    <comp lib="0" loc="(1160,190)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_1"/>
      <a name="output" val="true"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(260,280)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="en"/>
    </comp>
    <comp lib="0" loc="(70,70)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="clk"/>
    </comp>
    <comp loc="(1160,190)" name="pwm">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="pwm_1"/>
    </comp>
    <comp loc="(320,160)" name="debouncer_30ns">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="debouncer_30ns_3"/>
    </comp>
    <comp loc="(640,140)" name="numarator_1s">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="numarator_1s_1"/>
    </comp>
    <comp loc="(640,220)" name="numarator_2s">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="numarator_2s_1"/>
    </comp>
    <comp loc="(640,300)" name="numarator_3s">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="numarator_3s_1"/>
    </comp>
    <comp loc="(640,380)" name="numarator_4s">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="numarator_4s_1"/>
    </comp>
    <comp loc="(640,460)" name="numarator_5s">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="numarator_5s_1"/>
    </comp>
    <comp loc="(640,540)" name="numarator_6s">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="numarator_6s_1"/>
    </comp>
    <comp loc="(640,620)" name="numarator_7s">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="numarator_7s_1"/>
    </comp>
    <comp loc="(640,700)" name="numarator_8s">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="numarator_8s_1"/>
    </comp>
    <wire from="(260,280)" to="(380,280)"/>
    <wire from="(320,160)" to="(320,180)"/>
    <wire from="(320,180)" to="(320,260)"/>
    <wire from="(320,180)" to="(340,180)"/>
    <wire from="(320,260)" to="(320,340)"/>
    <wire from="(320,260)" to="(420,260)"/>
    <wire from="(320,340)" to="(320,420)"/>
    <wire from="(320,340)" to="(420,340)"/>
    <wire from="(320,420)" to="(320,500)"/>
    <wire from="(320,420)" to="(420,420)"/>
    <wire from="(320,500)" to="(320,580)"/>
    <wire from="(320,500)" to="(420,500)"/>
    <wire from="(320,580)" to="(320,660)"/>
    <wire from="(320,580)" to="(420,580)"/>
    <wire from="(320,660)" to="(320,740)"/>
    <wire from="(320,660)" to="(420,660)"/>
    <wire from="(320,740)" to="(420,740)"/>
    <wire from="(340,100)" to="(340,180)"/>
    <wire from="(340,100)" to="(910,100)"/>
    <wire from="(340,180)" to="(420,180)"/>
    <wire from="(370,140)" to="(370,220)"/>
    <wire from="(370,140)" to="(420,140)"/>
    <wire from="(370,220)" to="(370,300)"/>
    <wire from="(370,220)" to="(420,220)"/>
    <wire from="(370,300)" to="(370,380)"/>
    <wire from="(370,300)" to="(420,300)"/>
    <wire from="(370,380)" to="(370,460)"/>
    <wire from="(370,380)" to="(420,380)"/>
    <wire from="(370,460)" to="(370,540)"/>
    <wire from="(370,460)" to="(420,460)"/>
    <wire from="(370,540)" to="(370,620)"/>
    <wire from="(370,540)" to="(420,540)"/>
    <wire from="(370,620)" to="(370,700)"/>
    <wire from="(370,620)" to="(420,620)"/>
    <wire from="(370,70)" to="(370,140)"/>
    <wire from="(370,70)" to="(940,70)"/>
    <wire from="(370,700)" to="(420,700)"/>
    <wire from="(380,160)" to="(380,240)"/>
    <wire from="(380,160)" to="(420,160)"/>
    <wire from="(380,240)" to="(380,280)"/>
    <wire from="(380,240)" to="(420,240)"/>
    <wire from="(380,280)" to="(380,320)"/>
    <wire from="(380,320)" to="(380,400)"/>
    <wire from="(380,320)" to="(420,320)"/>
    <wire from="(380,400)" to="(380,480)"/>
    <wire from="(380,400)" to="(420,400)"/>
    <wire from="(380,480)" to="(380,560)"/>
    <wire from="(380,480)" to="(420,480)"/>
    <wire from="(380,560)" to="(380,640)"/>
    <wire from="(380,560)" to="(420,560)"/>
    <wire from="(380,640)" to="(380,720)"/>
    <wire from="(380,640)" to="(420,640)"/>
    <wire from="(380,720)" to="(420,720)"/>
    <wire from="(640,140)" to="(860,140)"/>
    <wire from="(640,220)" to="(840,220)"/>
    <wire from="(640,300)" to="(840,300)"/>
    <wire from="(640,380)" to="(850,380)"/>
    <wire from="(640,460)" to="(860,460)"/>
    <wire from="(640,540)" to="(870,540)"/>
    <wire from="(640,620)" to="(880,620)"/>
    <wire from="(640,700)" to="(940,700)"/>
    <wire from="(70,70)" to="(90,70)"/>
    <wire from="(840,220)" to="(840,250)"/>
    <wire from="(840,250)" to="(940,250)"/>
    <wire from="(840,270)" to="(840,300)"/>
    <wire from="(840,270)" to="(940,270)"/>
    <wire from="(850,290)" to="(850,380)"/>
    <wire from="(850,290)" to="(940,290)"/>
    <wire from="(860,140)" to="(860,230)"/>
    <wire from="(860,230)" to="(940,230)"/>
    <wire from="(860,310)" to="(860,460)"/>
    <wire from="(860,310)" to="(940,310)"/>
    <wire from="(860,460)" to="(860,480)"/>
    <wire from="(870,330)" to="(870,540)"/>
    <wire from="(870,330)" to="(940,330)"/>
    <wire from="(880,350)" to="(880,620)"/>
    <wire from="(880,350)" to="(940,350)"/>
    <wire from="(90,180)" to="(100,180)"/>
    <wire from="(90,70)" to="(370,70)"/>
    <wire from="(90,70)" to="(90,180)"/>
    <wire from="(910,100)" to="(910,210)"/>
    <wire from="(910,210)" to="(940,210)"/>
    <wire from="(940,210)" to="(950,210)"/>
    <wire from="(940,370)" to="(940,700)"/>
    <wire from="(940,70)" to="(940,190)"/>
  </circuit>
  <vhdl name="ssddecoder">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY ssddecoder IS
  PORT (
  enable: in std_logic;
  code: in std_logic_vector(3 downto 0);
  decode_ssd: out std_logic_vector(6 downto 0) --abcdefg
    );
END ssddecoder;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE behavioral OF ssddecoder IS

BEGIN

process(enable, code)
begin
	if enable = '1' then
		case code is
			when "0000" =&gt; decode_ssd&lt;="0000001";
			when "0001" =&gt; decode_ssd&lt;="1001111";
			when "0010" =&gt; decode_ssd&lt;="0101101";
			when "0011" =&gt; decode_ssd&lt;="0000110";
			when "0100" =&gt; decode_ssd&lt;="1101100";
			when "0101" =&gt; decode_ssd&lt;="0100100";
			when "0110" =&gt; decode_ssd&lt;="0100000";
			when "0111" =&gt; decode_ssd&lt;="0001111";
			when "1000" =&gt; decode_ssd&lt;="0000000";
			when "1001" =&gt; decode_ssd&lt;="0000100";
			when "1111" =&gt; decode_ssd&lt;="1111110";
			when others =&gt; decode_ssd&lt;="1111111";
		end case;
	else decode_ssd&lt;="0000001";
	end if;		
end process;

END behavioral;</vhdl>
  <vhdl name="binary_bcd">library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
 
entity binary_bcd is
    port(
        clk, reset: in std_logic;
        binary_in: in std_logic_vector(7 downto 0);
        bcd0, bcd1, bcd2, bcd3, bcd4: out std_logic_vector(3 downto 0)
    );
end binary_bcd ;
 
architecture behaviour of binary_bcd is
    type states is (start, shift, done);
    signal state, state_next: states;
 
    signal binary, binary_next: std_logic_vector(7 downto 0);
    signal bcds, bcds_reg, bcds_next: std_logic_vector(19 downto 0);
    -- output register keep output constant during conversion
    signal bcds_out_reg, bcds_out_reg_next: std_logic_vector(19 downto 0);
    -- need to keep track of shifts
    signal shift_counter, shift_counter_next: natural range 0 to 8;
begin
 
    process(clk, reset)
    begin
        if reset = '1' then
            binary &lt;= (others =&gt; '0');
            bcds &lt;= (others =&gt; '0');
            state &lt;= start;
            bcds_out_reg &lt;= (others =&gt; '0');
            shift_counter &lt;= 0;
        elsif falling_edge(clk) then
            binary &lt;= binary_next;
            bcds &lt;= bcds_next;
            state &lt;= state_next;
            bcds_out_reg &lt;= bcds_out_reg_next;
            shift_counter &lt;= shift_counter_next;
        end if;
    end process;
 
    convert:
    process(state, binary, binary_in, bcds, bcds_reg, shift_counter)
    begin
        state_next &lt;= state;
        bcds_next &lt;= bcds;
        binary_next &lt;= binary;
        shift_counter_next &lt;= shift_counter;
 
        case state is
            when start =&gt;
                state_next &lt;= shift;
                binary_next &lt;= binary_in;
                bcds_next &lt;= (others =&gt; '0');
                shift_counter_next &lt;= 0;
            when shift =&gt;
                if shift_counter = 8 then
                    state_next &lt;= done;
                else
                    binary_next &lt;= binary(6 downto 0) &amp; 'L';
                    bcds_next &lt;= bcds_reg(18 downto 0) &amp; binary(7);
                    shift_counter_next &lt;= shift_counter + 1;
                end if;
            when done =&gt;
                state_next &lt;= start;
        end case;
    end process;
 
    bcds_reg(19 downto 16) &lt;= bcds(19 downto 16) + 3 when bcds(19 downto 16) &gt; 4 else
                              bcds(19 downto 16);
    bcds_reg(15 downto 12) &lt;= bcds(15 downto 12) + 3 when bcds(15 downto 12) &gt; 4 else
                              bcds(15 downto 12);
    bcds_reg(11 downto 8) &lt;= bcds(11 downto 8) + 3 when bcds(11 downto 8) &gt; 4 else
                             bcds(11 downto 8);
    bcds_reg(7 downto 4) &lt;= bcds(7 downto 4) + 3 when bcds(7 downto 4) &gt; 4 else
                            bcds(7 downto 4);
    bcds_reg(3 downto 0) &lt;= bcds(3 downto 0) + 3 when bcds(3 downto 0) &gt; 4 else
                            bcds(3 downto 0);
 
    bcds_out_reg_next &lt;= bcds when state = done else
                         bcds_out_reg;
 
    bcd4 &lt;= bcds_out_reg(19 downto 16);
    bcd3 &lt;= bcds_out_reg(15 downto 12);
    bcd2 &lt;= bcds_out_reg(11 downto 8);
    bcd1 &lt;= bcds_out_reg(7 downto 4);
    bcd0 &lt;= bcds_out_reg(3 downto 0);
 
end behaviour;
</vhdl>
  <vhdl name="UP_COUNTER">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
-- FPGA projects using Verilog code VHDL code
-- fpga4student.com: FPGA projects, Verilog projects, VHDL projects
-- VHDL project: VHDL code for counters with testbench  
-- VHDL project: VHDL code for up counter   
entity UP_COUNTER is
    Port ( clk: in std_logic; -- clock input
           reset: in std_logic; -- reset input 
           counter: out std_logic_vector(2 downto 0) -- output 4-bit counter
     );
end UP_COUNTER;

architecture Behavioral of UP_COUNTER is
signal counter_up: std_logic_vector(16 downto 0);
begin
-- up counter
process(clk)
begin
if(rising_edge(clk)) then
    if(reset='1') then
         counter_up &lt;= x"0";
    else
        counter_up &lt;= counter_up + x"1";
    end if;
 end if;
end process;
 counter(2) &lt;= counter_up(16);
 counter(1) &lt;= counter_up(15);
 counter(0) &lt;= counter_up(14);

end Behavioral;</vhdl>
  <vhdl name="mux_8_la_1_4bit">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY mux_8_la_1_4bit IS
  PORT (
din_0,din_1,din_2,din_3,din_4,din_5,din_6,din_7: in std_logic_vector(3 downto 0);
  		sel: in std_logic_vector(2 downto 0);
  		d_out: out std_logic_vector(3 downto 0));
END mux_8_la_1_4bit;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF mux_8_la_1_4bit IS

BEGIN
	with sel select d_out &lt;= din_0 when "000",
						din_1 when "001",
						din_2 when "010",
						din_3 when "011",
						din_4 when "100",
						din_5 when "101",
						din_6 when "110",
						"00"&amp;din_7 when "111",	
						"0000" when others;	

END TypeArchitecture;
</vhdl>
  <vhdl name="mux_8_la_1_7bit">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY mux_8_la_1_7bit IS
  PORT (
din_0,din_1,din_2,din_3,din_4,din_5,din_6,din_7: in std_logic_vector(7 downto 0);
  		sel: in std_logic_vector(2 downto 0);
  		d_out: out std_logic_vector(7 downto 0));
END mux_8_la_1_7bit;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF mux_8_la_1_7bit IS

BEGIN
	with sel select d_out &lt;= din_0 when "000",
						din_1 when "001",
						din_2 when "010",
						din_3 when "011",
						din_4 when "100",
						din_5 when "101",
						din_6 when "110",
						din_7 when "111",	
						"0000000" when others;	

END TypeArchitecture;
</vhdl>
  <vhdl name="mux_4_la_1_4bit">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY mux_4_la_1_4bit IS
  PORT (
din_0,din_1,din_2,din_3: in std_logic_vector(3 downto 0);
  		sel: in std_logic_vector(1 downto 0);
  		d_out: out std_logic_vector(7 downto 0));
END mux_4_la_1_4bit;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF mux_4_la_1_4bit IS

BEGIN
	with sel select d_out &lt;= din_0 when "00"
,
						"0000"&amp;din_1 when "01",
						"0000"&amp;din_2 when "10",
						"0000"&amp;din_3 when "11",	
						"0000" when others;	

END TypeArchitecture;
</vhdl>
  <vhdl name="mux_4_la_1_8bit">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY mux_4_la_1_8bit IS
  PORT (
din_0,din_1,din_2,din_3: in std_logic_vector(7 downto 0);
  		sel: in std_logic_vector(1 downto 0);
  		d_out: out std_logic_vector(7 downto 0));
END mux_4_la_1_8bit;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF mux_4_la_1_8bit IS

BEGIN
	with sel select d_out &lt;= din_0 when "00"
,
						din_1 when "01",
						din_2 when "10",
						din_3 when "11",	
						"0000000" when others;	

END TypeArchitecture;
</vhdl>
  <vhdl name="debouncer_30ns">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY debouncer_30ns IS
  PORT (
btn,clk: in std_logic;
  btn_db: out std_logic);
END debouncer_30ns;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF debouncer_30ns IS
	
component bist_D IS
	  PORT (
	 d,clk,r,s: in std_logic;
	  		q: out std_logic
	    );
	END component;
	signal q1, q2, q3: std_logic;
BEGIN

	d1: bist_D port map(btn,clk,'0','0',q1);
	d2: bist_D port map(q1,clk,'0','0',q2);
	d3: bist_D port map(q2,clk,'0','0',q3);

	btn_db &lt;= (q1 and q2 and q3);
END TypeArchitecture;


LIBRARY ieee;
USE ieee.std_logic_1164.all;


ENTITY bist_D IS
  PORT (
 d,clk,r,s: in std_logic;
  		q: out std_logic
    );
END bist_D;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE comp OF bist_D IS

BEGIN

	process(clk)
	begin
		if rising_edge(clk) then
		if r='1' then q &lt;= '0';
		else if s='1' then q&lt;='1';
			else q&lt;=d;
			end if;
		end if;
		end if;
	end process;

END comp;

</vhdl>
  <vhdl name="pwm">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;

entity pwm is
  port (
    clk : in std_logic;
    rst : in std_logic;
    duty_cycle0: in std_logic_vector(7 downto 0);
    duty_cycle1: in std_logic_vector(7 downto 0);
    duty_cycle2: in std_logic_vector(7 downto 0);
    duty_cycle3: in std_logic_vector(7 downto 0);
    duty_cycle4: in std_logic_vector(7 downto 0);
    duty_cycle5: in std_logic_vector(7 downto 0);
    duty_cycle6: in std_logic_vector(7 downto 0);
    duty_cycle7: in std_logic_vector(7 downto 0);
    led_out : out std_logic_vector(7 downto 0)
  );
end pwm;

architecture rtl of pwm is

  signal pwm_cnt : std_logic_vector(7 downto 0) := (others =&gt; '0');
  signal pwm_out : std_logic_vector(7 downto 0) := (others =&gt; '0');

begin

  PWM_PROC : process(clk)
  begin
    if rising_edge(clk) then
      if rst = '1' then
        pwm_cnt &lt;= (others =&gt; '0');
        pwm_out &lt;= (others=&gt;'0');

      else
          pwm_cnt &lt;= pwm_cnt + 1;
          

          -- Wrap pwm_cnt after 2**pwm_bits - 2
          if pwm_cnt = "11111110" then
            pwm_cnt &lt;= (others =&gt; '0');
          end if;

          if pwm_cnt &lt; duty_cycle0 then
            pwm_out(0) &lt;= '1';
           else
           	pwm_out(0) &lt;= '0';
          end if;

          if pwm_cnt &lt; duty_cycle1 then
            pwm_out(1) &lt;= '1';
           else
           	pwm_out(1) &lt;= '0';
          end if;

		if pwm_cnt &lt; duty_cycle2 then
            pwm_out(2) &lt;= '1';
           else
           	pwm_out(2) &lt;= '0';
          end if;
          if pwm_cnt &lt; duty_cycle3 then
            pwm_out(3) &lt;= '1';
           else
           	pwm_out(3) &lt;= '0';
          end if;
          if pwm_cnt &lt; duty_cycle4 then
            pwm_out(4) &lt;= '1';
           else
           	pwm_out(4) &lt;= '0';
          end if;
          if pwm_cnt &lt; duty_cycle5 then
            pwm_out(5) &lt;= '1';
           else
           	pwm_out(5) &lt;= '0';
          end if;
          if pwm_cnt &lt; duty_cycle6 then
            pwm_out(6) &lt;= '1';
           else
           	pwm_out(6) &lt;= '0';
          end if;
          if pwm_cnt &lt; duty_cycle7 then
            pwm_out(7) &lt;= '1';
           else
           	pwm_out(7) &lt;= '0';
          end if;
        end if;
      end if;
  end process;
led_out &lt;= pwm_out;
end architecture;</vhdl>
  <vhdl name="numarator_1s">LIBRARY ieee;
USE ieee.std_logic_1164.all;

use ieee.std_logic_unsigned.all;

ENTITY numarator_1s IS
  PORT (
clk: in std_logic;
  		en: in std_logic;
  		rst: in std_logic;
  		duty_cycle: out std_logic_vector(7 downto 0)
    );
END numarator_1s;

ARCHITECTURE TypeArchitecture OF numarator_1s IS
signal cnt: integer range 0 to 390625 := 0;
signal tmp: std_logic_vector(7 downto 0):="00000000";
BEGIN

process(clk)
begin

	if rising_edge(clk) then

		if cnt = 390625 then
			cnt &lt;= 0;
			tmp &lt;= tmp + 1;
		else 
			cnt &lt;= cnt + 1;
		end if;

	end if;

end process;

duty_cycle&lt;=tmp;
END TypeArchitecture;
</vhdl>
  <vhdl name="numarator_2s">LIBRARY ieee;
USE ieee.std_logic_1164.all;

use ieee.std_logic_unsigned.all;

ENTITY numarator_2s IS
  PORT (
clk: in std_logic;
  		en: in std_logic;
  		rst: in std_logic;
  		duty_cycle: out std_logic_vector(7 downto 0)
    );
END numarator_2s;

ARCHITECTURE TypeArchitecture OF numarator_2s IS
signal cnt: integer range 0 to 781250 := 0;
signal tmp: std_logic_vector(7 downto 0):="00000000";
BEGIN

process(clk)
begin

	if rising_edge(clk) then

		if cnt = 781250 then
			cnt &lt;= 0;
			tmp &lt;= tmp + 1;
		else 
			cnt &lt;= cnt + 1;
		end if;

	end if;

end process;

duty_cycle&lt;=tmp;
END TypeArchitecture;
</vhdl>
  <vhdl name="numarator_4s">LIBRARY ieee;
USE ieee.std_logic_1164.all;

use ieee.std_logic_unsigned.all;

ENTITY numarator_4s IS
  PORT (
clk: in std_logic;
  		en: in std_logic;
  		rst: in std_logic;
  		duty_cycle: out std_logic_vector(7 downto 0)
    );
END numarator_4s;

ARCHITECTURE TypeArchitecture OF numarator_4s IS
signal cnt: integer range 0 to 1562500 := 0;
signal tmp: std_logic_vector(7 downto 0):="00000000";
BEGIN

process(clk)
begin

	if rising_edge(clk) then

		if cnt = 1562500 then
			cnt &lt;= 0;
			tmp &lt;= tmp + 1;
		else 
			cnt &lt;= cnt + 1;
		end if;

	end if;

end process;

duty_cycle&lt;=tmp;
END TypeArchitecture;
</vhdl>
  <vhdl name="numarator_3s">LIBRARY ieee;
USE ieee.std_logic_1164.all;

use ieee.std_logic_unsigned.all;

ENTITY numarator_3s IS
  PORT (
clk: in std_logic;
  		en: in std_logic;
  		rst: in std_logic;
  		duty_cycle: out std_logic_vector(7 downto 0)
    );
END numarator_3s;

ARCHITECTURE TypeArchitecture OF numarator_3s IS
signal cnt: integer range 0 to 1171875 := 0;
signal tmp: std_logic_vector(7 downto 0):="00000000";
BEGIN

process(clk)
begin

	if rising_edge(clk) then

		if cnt = 1171875 then
			cnt &lt;= 0;
			tmp &lt;= tmp + 1;
		else 
			cnt &lt;= cnt + 1;
		end if;

	end if;

end process;

duty_cycle&lt;=tmp;
END TypeArchitecture;
</vhdl>
  <vhdl name="numarator_5s">LIBRARY ieee;
USE ieee.std_logic_1164.all;

use ieee.std_logic_unsigned.all;

ENTITY numarator_5s IS
  PORT (
clk: in std_logic;
  		en: in std_logic;
  		rst: in std_logic;
  		duty_cycle: out std_logic_vector(7 downto 0)
    );
END numarator_5s;

ARCHITECTURE TypeArchitecture OF numarator_5s IS
signal cnt: integer range 0 to 1953125 := 0;
signal tmp: std_logic_vector(7 downto 0):="00000000";
BEGIN

process(clk)
begin

	if rising_edge(clk) then

		if cnt = 1953125 then
			cnt &lt;= 0;
			tmp &lt;= tmp + 1;
		else 
			cnt &lt;= cnt + 1;
		end if;

	end if;

end process;

duty_cycle&lt;=tmp;
END TypeArchitecture;
</vhdl>
  <vhdl name="numarator_6s">LIBRARY ieee;
USE ieee.std_logic_1164.all;

use ieee.std_logic_unsigned.all;

ENTITY numarator_6s IS
  PORT (
clk: in std_logic;
  		en: in std_logic;
  		rst: in std_logic;
  		duty_cycle: out std_logic_vector(7 downto 0)
    );
END numarator_6s;

ARCHITECTURE TypeArchitecture OF numarator_6s IS
signal cnt: integer range 0 to 2343750 := 0;
signal tmp: std_logic_vector(7 downto 0):="00000000";
BEGIN

process(clk)
begin

	if rising_edge(clk) then

		if cnt = 2343750 then
			cnt &lt;= 0;
			tmp &lt;= tmp + 1;
		else 
			cnt &lt;= cnt + 1;
		end if;

	end if;

end process;

duty_cycle&lt;=tmp;
END TypeArchitecture;
</vhdl>
  <vhdl name="numarator_7s">LIBRARY ieee;
USE ieee.std_logic_1164.all;

use ieee.std_logic_unsigned.all;

ENTITY numarator_7s IS
  PORT (
clk: in std_logic;
  		en: in std_logic;
  		rst: in std_logic;
  		duty_cycle: out std_logic_vector(7 downto 0)
    );
END numarator_7s;

ARCHITECTURE TypeArchitecture OF numarator_7s IS
signal cnt: integer range 0 to 2734375 := 0;
signal tmp: std_logic_vector(7 downto 0):="00000000";
BEGIN

process(clk)
begin

	if rising_edge(clk) then

		if cnt = 2734375 then
			cnt &lt;= 0;
			tmp &lt;= tmp + 1;
		else 
			cnt &lt;= cnt + 1;
		end if;

	end if;

end process;

duty_cycle&lt;=tmp;
END TypeArchitecture;
</vhdl>
  <vhdl name="numarator_8s">LIBRARY ieee;
USE ieee.std_logic_1164.all;

use ieee.std_logic_unsigned.all;

ENTITY numarator_8s IS
  PORT (
clk: in std_logic;
  		en: in std_logic;
  		rst: in std_logic;
  		duty_cycle: out std_logic_vector(7 downto 0)
    );
END numarator_8s;

ARCHITECTURE TypeArchitecture OF numarator_8s IS
signal cnt: integer range 0 to 3125000 := 0;
signal tmp: std_logic_vector(7 downto 0):="00000000";
BEGIN

process(clk)
begin

	if rising_edge(clk) then

		if cnt = 3125000 then
			cnt &lt;= 0;
			tmp &lt;= tmp + 1;
		else 
			cnt &lt;= cnt + 1;
		end if;

	end if;

end process;

duty_cycle&lt;=tmp;
END TypeArchitecture;
</vhdl>
  <vhdl name="man_ctr">----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 05/22/2023 05:59:28 PM
-- Design Name: 
-- Module Name: man_ctr - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_unsigned.all;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;
--COUNTER PT MOD MANUAL
entity man_ctr is
  Port (inc,dec,clk,rst,en: in std_logic;
        duty_cycle: out std_logic_vector(7 downto 0));
end man_ctr;

architecture Behavioral of man_ctr is

signal cnt: std_logic_vector(7 downto 0):= (others =&gt; '0');
begin
process(clk, inc, dec, rst)
begin
    if rst = '1' then
    
    cnt &lt;= (others =&gt; '0');

    elsif en = '1' then 
        if rising_edge(clk) then
            if dec = '1' and not(cnt = 0) then
                cnt &lt;= cnt - 5;
            elsif inc = '1' and not(cnt = 250) then
                cnt &lt;= cnt + 5;
            end if;
        end if;
    end if;
  duty_cycle &lt;= cnt;
end process;

end Behavioral;
</vhdl>
  <vhdl name="RS">--------------------------------------------------------------------------------
-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY RS IS
  PORT (
R,S: in std_logic;
  		clk: in std_logic;
  		Q: out std_logic
  		);
END RS;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF RS IS

signal q0: std_logic := '1';
BEGIN
process(clk)
begin

	if rising_edge(clk) then

		if r = '1' and s = '0' then 
			q0 &lt;= '0';
		elsif r='0' and s = '1' then
			q0 &lt;= '1';
		else
			q0 &lt;= q0;
		end if;

	end if;
	Q &lt;= q0;
end process;

END TypeArchitecture;
</vhdl>
  <vhdl name="nr_auto">LIBRARY ieee;
USE ieee.std_logic_1164.all;

use ieee.std_logic_unsigned.all; 

ENTITY nr_auto IS
  PORT (
inc, dec , rst, clk, en: in std_logic;
  		nr: out std_logic_vector(3 downto 0)
    );
END nr_auto;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF nr_auto IS

signal tmp: std_logic_vector(3 downto 0) := (others =&gt; '0');

BEGIN

process(clk)
begin
	if rst = '1' then
			tmp &lt;= "0001";
	elsif rising_edge(clk) then
		if en = '1' then
			if inc = '1' and tmp = 15 then
				tmp &lt;= tmp;
			elsif inc = '1' then
				tmp &lt;= tmp + 1;
			elsif dec = '1' and tmp = 0 then
				tmp &lt;= tmp;
			elsif dec = '1' then
				tmp &lt;= tmp - 1;
			else 
				tmp &lt;= tmp;
			end if;
		end if;
		

end if;

end process;

nr &lt;= tmp;
END TypeArchitecture;
</vhdl>
  <vhdl name="div_freq_2hz">----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 05/22/2023 06:12:10 PM
-- Design Name: 
-- Module Name: div_freq_2hz - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity div_freq_2hz is
  Port (clk_100mhz: in std_logic;
        clk_2hz: out std_logic );
end div_freq_2hz;

architecture Behavioral of div_freq_2hz is
signal t: std_logic := '0';
signal cnt: integer range 0 to 25000000:= 0;
begin
    process(clk_100mhz)
    begin
        if rising_edge(clk_100mhz) then
            if(cnt = 25000000) then
            t &lt;= not(t);
            cnt &lt;= 0;
            else 
            cnt &lt;= cnt + 1;
            end if;
        end if;
    end process;
    clk_2hz &lt;= t;
end Behavioral;
</vhdl>
  <vhdl name="clk_256_pe_per_hz">LIBRARY ieee;
USE ieee.std_logic_1164.all;

use ieee.std_logic_unsigned.all;

ENTITY clk_256_pe_per_hz IS
  
  PORT (n: in std_logic_vector(3 downto 0);
  		rst: in std_logic;
  		clk_100mhz: in std_logic;
  		clk_gen: out std_logic
  );
END clk_256_pe_per_hz;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF clk_256_pe_per_hz IS

signal t: std_logic := '0';
signal a: integer ;--:= conv_integer(n)*781250;
signal cnt: integer :=0;
BEGIN
--process(n, clk_100mhz)
--begin
with n select a &lt;=  195312 when x"2",
				292968 when x"3",
				390624 when x"4",
				488280 when x"5",
				585936 when x"6",
				683592 when x"7",
				781248 when x"8",
				878904 when x"9",
				976560 when x"a",
				1074216 when x"b",
				1171872 when x"c",
				1269528 when x"d",
				1367184 when x"e",
				1464840 when x"f",
				97656 when others;
				


process(clk_100mhz, rst)
    begin
    if(rst = '1') then
    	cnt &lt;= 0;
    	
        elsif rising_edge(clk_100mhz) then
            if(cnt = a) then
            t &lt;= not(t);
            cnt &lt;= 0;
            else 
            cnt &lt;= cnt + 1;
            end if;
        end if;
    end process;
    clk_gen &lt;= t;


END TypeArchitecture;
</vhdl>
  <vhdl name="triangular">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity triangular is
port (clk : in std_logic; 
      wave_out : out std_logic_vector(7 downto 0);
      reset :in std_logic
     );
end triangular;

architecture Behavioral of triangular is

signal count2 : integer := 0;
signal direction : std_logic := '0';

begin

process(clk,reset)
begin
if(reset = '1') then
    count2 &lt;= 0;
elsif(rising_edge(clk)) then
    if(direction = '0') then
        if(count2 = 0) then
        direction &lt;= '1';
        else
            count2 &lt;= count2 - 1; --up counts from 129 to 255 and then 0 to 127
        end if;
    else
        if(count2 = 255) then
            direction &lt;= '0';
        else
            count2 &lt;= count2 +1; --down counts from 126 to 0 and then 255 to 128
        end if;
    end if;
        
end if;
end process;

wave_out &lt;= conv_std_logic_vector(count2,8);

end Behavioral;</vhdl>
  <vhdl name="mux24_8_8bit">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY mux24_8_8bit IS&#13;
  PORT (&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert input ports below&#13;
    clock      : IN  std_logic;                    -- input bit example&#13;
    val        : IN  std_logic_vector(3 DOWNTO 0); -- input vector example&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert output ports below&#13;
    max        : OUT std_logic;                    -- output bit example&#13;
    cpt        : OUT std_logic_vector(3 DOWNTO 0)  -- output vector example&#13;
    );&#13;
END mux24_8_8bit;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF mux24_8_8bit IS&#13;
&#13;
BEGIN&#13;
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="mux_24_la_8_8bit">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY mux_24_la_8_8bit IS
  PORT (
din_0,din_1,din_2,din_3,din_4,din_5,din_6,din_7: in std_logic_vector(7 downto 0);
din_8,din_9,din_10,din_11,din_12,din_13,din_14,din_15: in std_logic_vector(7 downto 0);
din_16,din_17,din_18,din_19,din_20,din_21,din_22,din_23: in std_logic_vector(7 downto 0);
  		sel: in std_logic_vector(1 downto 0);
  		d_out0: out std_logic_vector(7 downto 0);
  		d_out1: out std_logic_vector(7 downto 0);
  		d_out2: out std_logic_vector(7 downto 0);
  		d_out3: out std_logic_vector(7 downto 0);
  		d_out4: out std_logic_vector(7 downto 0);
  		d_out5: out std_logic_vector(7 downto 0);
  		d_out6: out std_logic_vector(7 downto 0);
  		d_out7: out std_logic_vector(7 downto 0));
END  mux_24_la_8_8bit;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF  mux_24_la_8_8bit IS

BEGIN
	with sel select d_out0 &lt;= din_0 when "00",
						din_8 when "01",
						din_16 when "10",	
						"0000000" when others;

	with sel select d_out1 &lt;= din_1 when "00",
						din_9 when "01",
						din_17 when "10",	
						"0000000" when others;

	with sel select d_out2 &lt;= din_2 when "00",
						din_10 when "01",
						din_18 when "10",	
						"0000000" when others;

	with sel select d_out3 &lt;= din_3 when "00",
						din_11 when "01",
						din_19 when "10",	
						"0000000" when others;

	with sel select d_out4 &lt;= din_4 when "00",
						din_12 when "01",
						din_20 when "10",	
						"0000000" when others;

	with sel select d_out5 &lt;= din_5 when "00",
						din_13 when "01",
						din_21 when "10",	
						"0000000" when others;

	with sel select d_out6 &lt;= din_6 when "00",
						din_14 when "01",
						din_22 when "10",	
						"0000000" when others;

	with sel select d_out7 &lt;= din_7 when "00",
						din_15 when "01",
						din_23 when "10",	
						"0000000" when others;

END TypeArchitecture;
</vhdl>
  <vhdl name="UC">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY UC IS&#13;
  PORT (&#13;inc,dec,rst,ok,clk: in std_logic;
  		mode: out std_logic_vector(1 downto 0);
  		enable_man: out std_logic;
  		enable_auto: out std_logic;
  		enable_test: out std_logic
    );&#13;
END UC;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF UC IS&#13;
&#13;type state is (s1,s2,s3,s4,s5,s6,s7,s8);
signal current_state: state:=s1;
signal next_state: state ;
BEGIN&#13;
&#13;choose_state:process(clk)
begin

case current_state is
	when s1 =&gt; if inc = '1' then next_state &lt;= s3;
			else next_state &lt;= s2; end if;
	when s2 =&gt; if inc = '1' then next_state &lt;= s4;
			else next_state &lt;= s5;end if;
	when s3 =&gt; if rst = '0' then next_state &lt;= s3;
			else next_state &lt;= s1;end if;
	when s4 =&gt; if ok = '1' then next_state &lt;= s7;
			else next_state &lt;= s8;end if;
	when s5 =&gt; if inc = '1' then next_state &lt;= s1;
			else next_state &lt;= s6;end if;
	when s6 =&gt; if rst = '1' then next_state &lt;= s1;
			else next_state &lt;= s6;end if;
	when s7 =&gt; if rst = '1' then next_state &lt;= s1;
			else next_state &lt;= s7;end if;
	when s8 =&gt; if rst = '1' then next_state &lt;= s1;
			else next_state &lt;= s8;end if;

end case;

end process;

&#13;change_outputs:process(current_state)
begin
	case current_state is
		when s3 =&gt; enable_man &lt;= '1'; 
		when s6 =&gt; enable_test &lt;= '1';
		when s7 =&gt; enable_auto &lt;= '1';
		when others =&gt; enable_man &lt;='0'; enable_test &lt;= '0'; enable_auto &lt;='0';
	end case;
end process;

update_state:process(clk)
begin
	if rising_edge(clk) then current_state &lt;= next_state;
	end if;	

end process;

END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="or_gate">
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY or_gate IS&#13;
  PORT (&#13;a,b:in std_logic;
  x: out std_logic);&#13;
END or_gate;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF or_gate IS&#13;
&#13;
BEGIN&#13;
&#13;x&lt;= a or b;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="and_gate">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY and_gate IS&#13;
  PORT (&#13;a,b:in std_logic;
  x: out std_logic
    );&#13;
END and_gate;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF and_gate IS&#13;
&#13;
BEGIN&#13;
&#13;x&lt;= a and b;
&#13;
END TypeArchitecture;&#13;
</vhdl>
</project>
